module Krikri::Harvesters

  ##
  # A harvester implementation for reading MARC XML documents from a source.
  #
  # Subclasses of MarcXMLHarvester are expected to implement the following
  # methods:
  #
  #   - #each_collection (yields one or more IO objects containing a MARC XML
  #   - #collection)
  class MarcXMLHarvester
    include Krikri::Harvester

    ##
    # @abstract
    # @yield [Enumerable<IO>] gives a collection of IO objects representing
    #   XML to be parsed into the record.
    def each_collection
      raise NotImplementedError
    end

    ##
    # @return [Enumerator::Lazy] an enumerator of the records targeted by this
    #   harvester.
    def records
      enumerate_records.lazy.map { |rec| build_record(rec) }
    end

    ##
    # @return [Enumerator::Lazy] an enumerator of the 001 control fields from
    #   the records targeted by this harvester.
    def record_ids
      enumerate_records.lazy.map { |rec| rec.identifier }
    end

    ##
    # @return [String] the content type for the records generated by this
    #   harvester
    def content_type
      'text/xml'
    end

    private

    ##
    # @return [Enumerator] an enumerator over the records
    def enumerate_records
      Enumerator.new do |yielder|
        each_collection do |marcxml_io|
          Nokogiri::XML::Reader(marcxml_io).each do |node|
            if node.name == 'record' &&
               node.node_type == Nokogiri::XML::Reader::TYPE_ELEMENT
              yielder << MarcXMLDoc.new(node)
            end
          end
        end
      end
    end

    ##
    # Builds an instance of `@record_class` with the given doc's MARC XML as
    # content.
    #
    # @param marcxml_doc [MarcXMLDoc] the MarcXML document to serialize as
    #   `#content`
    # @return [#to_s] an instance of @record_class with a minted id and
    #   content the given content
    def build_record(marcxml_doc)
      @record_class.build(mint_id(marcxml_doc.identifier),
                          marcxml_doc.source,
                          content_type)
    end
  end


  ##
  # Value object containing a MARC record's identifier (parsed from control
  #   field 001) and original (MARC XML) source.
  class MarcXMLDoc

    # @!attribute [r] identifier
    # @!attribute [r] source
    attr_reader :identifier, :source

    ##
    # @param nokogiri_doc
    def initialize(nokogiri_doc)
      @source = nokogiri_doc.outer_xml
      doc = Nokogiri::XML(@source)

      @identifier = doc.xpath("//xmlns:controlfield[@tag='001']").text
    end

  end

end
